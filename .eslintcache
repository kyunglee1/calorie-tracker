[{"/Users/kyunglee/Desktop/nutrition-tracker-app/src/index.js":"1","/Users/kyunglee/Desktop/nutrition-tracker-app/src/App/index.js":"2","/Users/kyunglee/Desktop/nutrition-tracker-app/src/SearchBar/index.js":"3","/Users/kyunglee/Desktop/nutrition-tracker-app/src/ResultsTable/index.js":"4","/Users/kyunglee/Desktop/nutrition-tracker-app/src/CalorieLog/index.js":"5","/Users/kyunglee/Desktop/nutrition-tracker-app/src/CalorieLogPane/index.js":"6","/Users/kyunglee/Desktop/nutrition-tracker-app/src/ResultRow/index.js":"7","/Users/kyunglee/Desktop/nutrition-tracker-app/src/hooks/useLocalStorage.js":"8","/Users/kyunglee/Desktop/nutrition-tracker-app/src/helper/getUrl.js":"9","/Users/kyunglee/Desktop/nutrition-tracker-app/src/helper/debounce.js":"10","/Users/kyunglee/Desktop/nutrition-tracker-app/src/CalorieTracker/index.js":"11"},{"size":225,"mtime":1611902921031,"results":"12","hashOfConfig":"13"},{"size":201,"mtime":1612995182824,"results":"14","hashOfConfig":"13"},{"size":372,"mtime":1612858562228,"results":"15","hashOfConfig":"13"},{"size":808,"mtime":1612913789990,"results":"16","hashOfConfig":"13"},{"size":3159,"mtime":1612916075229,"results":"17","hashOfConfig":"13"},{"size":2322,"mtime":1612924578275,"results":"18","hashOfConfig":"13"},{"size":650,"mtime":1612914263796,"results":"19","hashOfConfig":"13"},{"size":723,"mtime":1612924749680,"results":"20","hashOfConfig":"13"},{"size":570,"mtime":1612924497284,"results":"21","hashOfConfig":"13"},{"size":282,"mtime":1612849945272,"results":"22","hashOfConfig":"13"},{"size":2314,"mtime":1612995221430,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"dhxver",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"26"},"/Users/kyunglee/Desktop/nutrition-tracker-app/src/index.js",[],["50","51","52","53","54"],"/Users/kyunglee/Desktop/nutrition-tracker-app/src/App/index.js",[],"/Users/kyunglee/Desktop/nutrition-tracker-app/src/SearchBar/index.js",[],"/Users/kyunglee/Desktop/nutrition-tracker-app/src/ResultsTable/index.js",[],"/Users/kyunglee/Desktop/nutrition-tracker-app/src/CalorieLog/index.js",["55","56"],"/* eslint-disable react/prop-types */\nimport React, { useEffect } from 'react';\nimport CalorieLogPane from '../CalorieLogPane/index';\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport './index.css';\n\nconst CalorieLog = ({ results, fdcId, clickedAdd }) => {\n  const [panes, setPanes] = useLocalStorage();\n\n  // Save food-item entry to panes\n  useEffect(() => {\n    const isDuplicate = panes.find((pane) => pane.fdcId === fdcId);\n\n    // Duplicates not allowed. Also, skip inital-render effect.\n    if (isDuplicate || !fdcId) return;\n\n    // Item that user has selected from search results\n    const entryItem = results.find((result) => result.fdcId === fdcId);\n    // Item's calories per 100 g/mL portion\n    const caloriesPer100 =\n      entryItem.foodNutrients.find((x) => x.nutrientId === 1008)?.value ?? 0;\n\n    setPanes((prevPanes) => [\n      ...prevPanes,\n      {\n        fdcId,\n        entryItem,\n        calorieCount: caloriesPer100, // Current calorie count\n        portionSize: '100', // Current portion size (g/mL)\n      },\n    ]);\n  }, [clickedAdd]);\n\n  // Indicate (blink) duplicate log-entry\n  useEffect(() => {\n    const duplicate = panes.find((pane) => pane.fdcId === fdcId);\n\n    if (!duplicate) return;\n\n    /* Add (type: 'duplicate') to pre-existing pane object, to\n       be passed as a prop. */\n    setPanes((prevPanes) => {\n      const newPanes = [...prevPanes];\n      const index = newPanes.indexOf(duplicate);\n      newPanes[index] = { ...newPanes[index], type: 'duplicate' };\n      return newPanes;\n    });\n\n    // Remove type: 'duplicate' after at least 500ms delay\n    setTimeout(() => {\n      setPanes((prevPanes) => {\n        const newPanes = [...prevPanes];\n        const index = newPanes.findIndex((pane) => pane.fdcId === fdcId);\n        newPanes[index] = { ...newPanes[index], type: '' };\n        return newPanes;\n      });\n    }, 500);\n  }, [clickedAdd]);\n\n  // Handler to remove entry by fdcId (id)\n  const handleDeleteClick = (id) => {\n    setPanes((prevPanes) => [...prevPanes].filter((pane) => pane.fdcId !== id));\n  };\n\n  /* Handler to update an entry's calorieCount\n     on portion-size change. */\n  const handleInputChange = (id, calorieCount, portionSize) => {\n    setPanes((prevPanes) => {\n      const newPanes = [...prevPanes];\n      const index = newPanes.findIndex((pane) => pane.fdcId === id);\n      newPanes[index] = { ...newPanes[index], calorieCount, portionSize };\n      return newPanes;\n    });\n  };\n\n  const panesList = panes.map((pane) => (\n    <CalorieLogPane\n      key={pane.fdcId}\n      entry={pane.entryItem}\n      portionSize={pane.portionSize}\n      onInputChange={handleInputChange}\n      onDeleteClick={handleDeleteClick}\n      paneType={pane.type}\n    />\n  ));\n\n  const totalCalories = panes.reduce(\n    (total, pane) => total + pane.calorieCount,\n    0\n  );\n\n  return (\n    <div className=\"log-container\">\n      <div id=\"log-header\">CALORIE LOG</div>\n      <div className=\"panes\">{panesList}</div>\n      {panes.length > 0 && (\n        <div id=\"log-footer\">\n          <span>{`Total: ${totalCalories} kcal`}</span>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default CalorieLog;\n","/Users/kyunglee/Desktop/nutrition-tracker-app/src/CalorieLogPane/index.js",[],"/Users/kyunglee/Desktop/nutrition-tracker-app/src/ResultRow/index.js",[],"/Users/kyunglee/Desktop/nutrition-tracker-app/src/hooks/useLocalStorage.js",[],["57","58","59","60","61"],"/Users/kyunglee/Desktop/nutrition-tracker-app/src/helper/getUrl.js",[],"/Users/kyunglee/Desktop/nutrition-tracker-app/src/helper/debounce.js",[],"/Users/kyunglee/Desktop/nutrition-tracker-app/src/CalorieTracker/index.js",["62"],"/* eslint-disable no-useless-return */\nimport React, { useCallback, useState } from 'react';\nimport SearchBar from '../SearchBar/index';\nimport ResultsTable from '../ResultsTable/index';\nimport CalorieLog from '../CalorieLog/index';\nimport getUrl from '../helper/getUrl';\nimport debounce from '../helper/debounce';\nimport './index.css';\n\nconst CalorieTracker = () => {\n  // Search-input value\n  const [food, setFood] = useState('');\n\n  // Boolean to display search results\n  const [showResults, setShowResults] = useState(false);\n  const [searchResults, setSearchResults] = useState([]);\n\n  /* USDA fdcId for the user-selected result. Will be\n     used to fetch data. */\n  const [fdcId, setFdcId] = useState('');\n\n  /* Toggled whenever user selects a result to be entered\n     into calorie log. */\n  const [toggle, setToggle] = useState(false);\n\n  // Fetch data given input food item\n  const fetchData = (input) => {\n    const foodItem = input.trim();\n    if (!foodItem) return;\n\n    fetch(getUrl(foodItem))\n      .then((res) => res.json())\n      .then((data) => {\n        setSearchResults(data.foods);\n        setShowResults(true);\n      });\n  };\n\n  // Memoize and debounce fetchData function\n  const debouncedFetch = useCallback(\n    debounce((input) => fetchData(input), 1000),\n    []\n  );\n\n  const handleInputChange = (e) => {\n    const input = e.target.value;\n    setFood(input);\n\n    // Hide results when input changes\n    setShowResults(false);\n\n    // Enqueue data-fetch for new input\n    debouncedFetch(input);\n  };\n\n  /* Handler for when user selects a result.\n     fdcId (id) of the result is passed in. */\n  const handleAddClick = (id) => {\n    setShowResults(false);\n    // Clear the search-input value\n    setFood('');\n    setFdcId(id);\n    setToggle((prevToggle) => !prevToggle);\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"header\">CALORIE * TRACKER</div>\n      <div className=\"left-view\">\n        <SearchBar inputText={food} onInputChange={handleInputChange} />\n        {showResults && (\n          <ResultsTable results={searchResults} onAddClick={handleAddClick} />\n        )}\n      </div>\n      <div className=\"right-view\">\n        <CalorieLog results={searchResults} fdcId={fdcId} clickedAdd={toggle} />\n      </div>\n    </div>\n  );\n};\n\nexport default CalorieTracker;\n",{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":32,"column":6,"nodeType":"75","endLine":32,"endColumn":18,"suggestions":"76"},{"ruleId":"73","severity":1,"message":"77","line":58,"column":6,"nodeType":"75","endLine":58,"endColumn":18,"suggestions":"78"},{"ruleId":"63","replacedBy":"79"},{"ruleId":"65","replacedBy":"80"},{"ruleId":"67","replacedBy":"81"},{"ruleId":"69","replacedBy":"82"},{"ruleId":"71","replacedBy":"83"},{"ruleId":"73","severity":1,"message":"84","line":40,"column":26,"nodeType":"85","endLine":40,"endColumn":37},"lines-around-directive",["86"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fdcId', 'panes', 'results', and 'setPanes'. Either include them or remove the dependency array.","ArrayExpression",["87"],"React Hook useEffect has missing dependencies: 'fdcId', 'panes', and 'setPanes'. Either include them or remove the dependency array.",["88"],["86"],[],[],[],[],"React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.","Identifier","padding-line-between-statements",{"desc":"89","fix":"90"},{"desc":"91","fix":"92"},"Update the dependencies array to be: [clickedAdd, fdcId, panes, results, setPanes]",{"range":"93","text":"94"},"Update the dependencies array to be: [clickedAdd, fdcId, panes, setPanes]",{"range":"95","text":"96"},[1059,1071],"[clickedAdd, fdcId, panes, results, setPanes]",[1886,1898],"[clickedAdd, fdcId, panes, setPanes]"]